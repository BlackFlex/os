Threads

http://www2.latech.edu/~box/os/ch04.pdf
http://web.cs.wpi.edu/~cs3013/c07/lectures/Section04-Threads.pdf
http://www.enseignement.polytechnique.fr/informatique/INF583/INF583_5.pdf

HANDLE WINAPI CreateThread(
        _In_opt_  LPSECURITY_ATTRIBUTES  lpThreadAttributes,
        _In_      SIZE_T                 dwStackSize,
        _In_      LPTHREAD_START_ROUTINE lpStartAddress,
        _In_opt_  LPVOID                 lpParameter,
        _In_      DWORD                  dwCreationFlags, // 0 bydefault
        _Out_opt_ LPDWORD                lpThreadId // HANDLE pointer
        );
        - A pointer to a SECURITY_ATTRIBUTES structure that determines whether the returned handle can be inherited by child processes. If lpThreadAttributes is NULL, the handle cannot be inherited.
        - The initial size of the stack, in bytes
        - A pointer to the application-defined function to be executed by the thread

            DWORD WINAPI ThreadFunction( LPVOID lpParam )
                - DWORD ThreadFunction(void* params)
                - void pointer to the parameter
                - return value
         
         - Creation flags:
                0 - The thread runs immediately after creation.
                CREATE_SUSPENDED - Create in a suspended state, Thread will run after ResumeThread function is called.
                
        - If ThreadFunction function exits, the DWORD return value is used to terminate the thread in an implicit call to the ExitThread function.

        - HANDLE WINAPI GetCurrentThread(void);

        - GetExitCodeThread function gets thread's return value.
                BOOL WINAPI GetExitCodeThread(
                  _In_  HANDLE  hThread,
                  _Out_ LPDWORD lpExitCode
                );
        
        - Query the exit code if thread is not completed yet

- How many threads can be created?
        Linux:
                cat /proc/sys/kernel/threads-max - gets the max count of threads per process
                // example output: 64087 per process
                cat /proc/sys/kernel/pid_max - gets the max count of process
                - sooooo x * y
                
- How arbitrary parameter/parameters can be passed to the thread function?

- Wait for thread termination:
        WaitForSingleObject(handle, INFINITE);
        
- TerminateThread:
        - BOOL WINAPI TerminateThread(
                  _Inout_ HANDLE hThread,
                  _In_    DWORD  dwExitCode
                );
        - Is this good enaugh?
        
        - BOOL WINAPI GetExitCodeThread(
                  _In_  HANDLE  hThread,
                  _Out_ LPDWORD lpExitCode
                );
                
- Exit thread inside the thread function:        
        // is this good enaugh?
        - VOID WINAPI ExitThread(
                _In_ DWORD dwExitCode
        );

- Get Thread priority class
        
        int WINAPI GetThreadPriority(
          _In_ HANDLE hThread
        );

- Change thread priority class
        
        BOOL WINAPI SetThreadPriority(
          _In_ HANDLE hThread,
          _In_ int    nPriority
        );
        
        - Thread should have THREAD_SET_INFORMATION or THREAD_SET_LIMITED_INFORMATION access rights
        - SetSecurityInfo, GetSecurityInfo
        
- Suspend and resume thread:
        Thread must have THREAD_SUSPEND_RESUME permissions:
        
        DWORD WINAPI ResumeThread(
          _In_ HANDLE hThread
        );
        
        DWORD WINAPI SuspendThread(
          _In_ HANDLE hThread
        );
        
        Set permissions:
                THREAD_QUERY_INFORMATION - GetExitCodeThread()
                THREAD_SUSPEND_RESUME
                THREAD_TERMINATE 
                THREAD_ALL_ACCESS
